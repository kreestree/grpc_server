// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/images_service/images_service.proto

package images_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImagesServiceClient is the client API for ImagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagesServiceClient interface {
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	GetImageList(ctx context.Context, in *GetImageListRequest, opts ...grpc.CallOption) (*GetImageListResponse, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
}

type imagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImagesServiceClient(cc grpc.ClientConnInterface) ImagesServiceClient {
	return &imagesServiceClient{cc}
}

func (c *imagesServiceClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, "/ImagesService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesServiceClient) GetImageList(ctx context.Context, in *GetImageListRequest, opts ...grpc.CallOption) (*GetImageListResponse, error) {
	out := new(GetImageListResponse)
	err := c.cc.Invoke(ctx, "/ImagesService/GetImageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, "/ImagesService/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImagesServiceServer is the server API for ImagesService service.
// All implementations must embed UnimplementedImagesServiceServer
// for forward compatibility
type ImagesServiceServer interface {
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	GetImageList(context.Context, *GetImageListRequest) (*GetImageListResponse, error)
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	mustEmbedUnimplementedImagesServiceServer()
}

// UnimplementedImagesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImagesServiceServer struct {
}

func (UnimplementedImagesServiceServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImagesServiceServer) GetImageList(context.Context, *GetImageListRequest) (*GetImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageList not implemented")
}
func (UnimplementedImagesServiceServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedImagesServiceServer) mustEmbedUnimplementedImagesServiceServer() {}

// UnsafeImagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagesServiceServer will
// result in compilation errors.
type UnsafeImagesServiceServer interface {
	mustEmbedUnimplementedImagesServiceServer()
}

func RegisterImagesServiceServer(s grpc.ServiceRegistrar, srv ImagesServiceServer) {
	s.RegisterService(&ImagesService_ServiceDesc, srv)
}

func _ImagesService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ImagesService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServiceServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImagesService_GetImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServiceServer).GetImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ImagesService/GetImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServiceServer).GetImageList(ctx, req.(*GetImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImagesService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ImagesService/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImagesService_ServiceDesc is the grpc.ServiceDesc for ImagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImagesService",
	HandlerType: (*ImagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _ImagesService_UploadImage_Handler,
		},
		{
			MethodName: "GetImageList",
			Handler:    _ImagesService_GetImageList_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _ImagesService_GetImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/images_service/images_service.proto",
}
